{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport default function useMutationObserver() {\n  const instance = useRef();\n  const destroyObserver = () => {\n    if (instance.current) {\n      instance.current.takeRecords();\n      instance.current.disconnect();\n      instance.current = undefined;\n    }\n  };\n  const createObserver = (target, callback) => {\n    if (MutationObserver) {\n      destroyObserver();\n      instance.current = new MutationObserver(callback);\n      instance.current.observe(target, {\n        childList: true,\n        subtree: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  };\n  useEffect(() => destroyObserver, []);\n  const reRendering = (mutation, watermarkElement) => {\n    let flag = false;\n    // Whether to delete the watermark node\n    if (mutation.removedNodes.length) {\n      flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n    }\n    // Whether the watermark dom property value has been modified\n    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n      flag = true;\n    }\n    return flag;\n  };\n  return {\n    createObserver,\n    destroyObserver,\n    reRendering\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useMutationObserver","instance","destroyObserver","current","takeRecords","disconnect","undefined","createObserver","target","callback","MutationObserver","observe","childList","subtree","attributeFilter","reRendering","mutation","watermarkElement","flag","removedNodes","length","Array","from","some","node","type"],"sources":["C:/Users/nimes/OneDrive/Desktop/Project/Imageupload/frontend/node_modules/antd/es/watermark/useMutationObserver.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nexport default function useMutationObserver() {\n  const instance = useRef();\n  const destroyObserver = () => {\n    if (instance.current) {\n      instance.current.takeRecords();\n      instance.current.disconnect();\n      instance.current = undefined;\n    }\n  };\n  const createObserver = (target, callback) => {\n    if (MutationObserver) {\n      destroyObserver();\n      instance.current = new MutationObserver(callback);\n      instance.current.observe(target, {\n        childList: true,\n        subtree: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  };\n  useEffect(() => destroyObserver, []);\n  const reRendering = (mutation, watermarkElement) => {\n    let flag = false;\n    // Whether to delete the watermark node\n    if (mutation.removedNodes.length) {\n      flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n    }\n    // Whether the watermark dom property value has been modified\n    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n      flag = true;\n    }\n    return flag;\n  };\n  return {\n    createObserver,\n    destroyObserver,\n    reRendering\n  };\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,eAAe,SAASC,mBAAmB,GAAG;EAC5C,MAAMC,QAAQ,GAAGF,MAAM,EAAE;EACzB,MAAMG,eAAe,GAAG,MAAM;IAC5B,IAAID,QAAQ,CAACE,OAAO,EAAE;MACpBF,QAAQ,CAACE,OAAO,CAACC,WAAW,EAAE;MAC9BH,QAAQ,CAACE,OAAO,CAACE,UAAU,EAAE;MAC7BJ,QAAQ,CAACE,OAAO,GAAGG,SAAS;IAC9B;EACF,CAAC;EACD,MAAMC,cAAc,GAAG,CAACC,MAAM,EAAEC,QAAQ,KAAK;IAC3C,IAAIC,gBAAgB,EAAE;MACpBR,eAAe,EAAE;MACjBD,QAAQ,CAACE,OAAO,GAAG,IAAIO,gBAAgB,CAACD,QAAQ,CAAC;MACjDR,QAAQ,CAACE,OAAO,CAACQ,OAAO,CAACH,MAAM,EAAE;QAC/BI,SAAS,EAAE,IAAI;QACfC,OAAO,EAAE,IAAI;QACbC,eAAe,EAAE,CAAC,OAAO,EAAE,OAAO;MACpC,CAAC,CAAC;IACJ;EACF,CAAC;EACDhB,SAAS,CAAC,MAAMI,eAAe,EAAE,EAAE,CAAC;EACpC,MAAMa,WAAW,GAAG,CAACC,QAAQ,EAAEC,gBAAgB,KAAK;IAClD,IAAIC,IAAI,GAAG,KAAK;IAChB;IACA,IAAIF,QAAQ,CAACG,YAAY,CAACC,MAAM,EAAE;MAChCF,IAAI,GAAGG,KAAK,CAACC,IAAI,CAACN,QAAQ,CAACG,YAAY,CAAC,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKP,gBAAgB,CAAC;IAClF;IACA;IACA,IAAID,QAAQ,CAACS,IAAI,KAAK,YAAY,IAAIT,QAAQ,CAACR,MAAM,KAAKS,gBAAgB,EAAE;MAC1EC,IAAI,GAAG,IAAI;IACb;IACA,OAAOA,IAAI;EACb,CAAC;EACD,OAAO;IACLX,cAAc;IACdL,eAAe;IACfa;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}