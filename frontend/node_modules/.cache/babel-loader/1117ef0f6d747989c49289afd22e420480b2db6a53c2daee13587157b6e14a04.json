{"ast":null,"code":"import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls();\n    // Generate style for all a tags in antd component.\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}","map":{"version":3,"names":["useStyleRegister","useContext","genCommonStyle","genLinkStyle","ConfigContext","mergeToken","statisticToken","useToken","genComponentStyleHook","component","styleFn","getDefaultToken","prefixCls","theme","token","hashId","getPrefixCls","iconPrefixCls","rootPrefixCls","path","proxyToken","flush","defaultComponentToken","mergedComponentToken","Object","assign","componentCls","mergedToken","iconCls","antCls","styleInterpolation","overrideComponentToken"],"sources":["C:/Users/nimes/OneDrive/Desktop/Project/Imageupload/frontend/node_modules/antd/es/theme/util/genComponentStyleHook.js"],"sourcesContent":["import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls();\n    // Generate style for all a tags in antd component.\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,cAAc,EAAEC,YAAY,QAAQ,aAAa;AAC1D,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,UAAU,EAAEC,cAAc,EAAEC,QAAQ,QAAQ,aAAa;AAClE,eAAe,SAASC,qBAAqB,CAACC,SAAS,EAAEC,OAAO,EAAEC,eAAe,EAAE;EACjF,OAAOC,SAAS,IAAI;IAClB,MAAM,CAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC,GAAGR,QAAQ,EAAE;IACzC,MAAM;MACJS,YAAY;MACZC;IACF,CAAC,GAAGhB,UAAU,CAACG,aAAa,CAAC;IAC7B,MAAMc,aAAa,GAAGF,YAAY,EAAE;IACpC;IACAhB,gBAAgB,CAAC;MACfa,KAAK;MACLC,KAAK;MACLC,MAAM;MACNI,IAAI,EAAE,CAAC,QAAQ,EAAED,aAAa;IAChC,CAAC,EAAE,MAAM,CAAC;MACR;MACA,GAAG,EAAEf,YAAY,CAACW,KAAK;IACzB,CAAC,CAAC,CAAC;IACH,OAAO,CAACd,gBAAgB,CAAC;MACvBa,KAAK;MACLC,KAAK;MACLC,MAAM;MACNI,IAAI,EAAE,CAACV,SAAS,EAAEG,SAAS,EAAEK,aAAa;IAC5C,CAAC,EAAE,MAAM;MACP,MAAM;QACJH,KAAK,EAAEM,UAAU;QACjBC;MACF,CAAC,GAAGf,cAAc,CAACQ,KAAK,CAAC;MACzB,MAAMQ,qBAAqB,GAAG,OAAOX,eAAe,KAAK,UAAU,GAAGA,eAAe,CAACS,UAAU,CAAC,GAAGT,eAAe;MACnH,MAAMY,oBAAoB,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,qBAAqB,CAAC,EAAER,KAAK,CAACL,SAAS,CAAC,CAAC;MACtG,MAAMiB,YAAY,GAAI,IAAGd,SAAU,EAAC;MACpC,MAAMe,WAAW,GAAGtB,UAAU,CAACe,UAAU,EAAE;QACzCM,YAAY;QACZd,SAAS;QACTgB,OAAO,EAAG,IAAGX,aAAc,EAAC;QAC5BY,MAAM,EAAG,IAAGX,aAAc;MAC5B,CAAC,EAAEK,oBAAoB,CAAC;MACxB,MAAMO,kBAAkB,GAAGpB,OAAO,CAACiB,WAAW,EAAE;QAC9CZ,MAAM;QACNH,SAAS;QACTM,aAAa;QACbD,aAAa;QACbc,sBAAsB,EAAEjB,KAAK,CAACL,SAAS;MACzC,CAAC,CAAC;MACFY,KAAK,CAACZ,SAAS,EAAEc,oBAAoB,CAAC;MACtC,OAAO,CAACrB,cAAc,CAACY,KAAK,EAAEF,SAAS,CAAC,EAAEkB,kBAAkB,CAAC;IAC/D,CAAC,CAAC,EAAEf,MAAM,CAAC;EACb,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}