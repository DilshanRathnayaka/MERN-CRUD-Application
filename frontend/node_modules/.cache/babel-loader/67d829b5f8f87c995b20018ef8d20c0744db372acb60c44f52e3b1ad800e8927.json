{"ast":null,"code":"/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default RefAutoComplete;","map":{"version":3,"names":["classNames","toArray","omit","React","ConfigContext","Select","genPurePanel","isValidElement","warning","Option","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","prefixCls","customizePrefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","customizeInput","length","getInputElement","undefined","optionChildren","map","item","createElement","key","value","optionValue","text","process","env","NODE_ENV","getPrefixCls","useContext","Object","assign","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"sources":["C:/Users/nimes/OneDrive/Desktop/Project/Imageupload/frontend/node_modules/antd/es/auto-complete/index.js"],"sourcesContent":["/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default RefAutoComplete;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}